# -*- coding: utf-8 -*-
"""Projek Analisis data_Arif Kurniawan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MZri6ZAu-i539y2RJZ3wuYa9gC5wCRiW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## **Gathering**"""

#memuat data
day_df= pd.read_csv("day.csv")
day_df.head()

#memuat data
hour_df= pd.read_csv("hour.csv")
hour_df.head()

"""# Assessing **Data**"""

day_df.info()

day_df.isna().sum()

hour_df.info()

hour_df.isna().sum()

day_df.describe()

hour_df.describe()

"""# Cleaning **data**

"""

day_df.drop_duplicates(inplace=True)

print("Jumlah duplikasi: ", day_df.duplicated().sum())

hour_df.drop_duplicates(inplace=True)

print("Jumlah duplikasi: ", hour_df.duplicated().sum())

"""# Exploratory Data Analysis (EDA)"""

# Menyaring kolom yang diperlukan dari day.csv dan hour.csv
day_df_filtered = day_df[['instant', 'dteday', 'season', 'weathersit', 'cnt']]
hour_df_filtered = hour_df[['instant', 'hr', 'season', 'weathersit', 'cnt']]

# Menyaring data untuk analisis lebih lanjut (opsional)
day_df_filtered['dteday'] = pd.to_datetime(day_df_filtered['dteday'])

# Menggabungkan data day.csv dan hour.csv berdasarkan 'instant'
df_combined = pd.merge(day_df_filtered, hour_df_filtered, on='instant', suffixes=('_day', '_hour'))

df_combined['cnt'] = df_combined['cnt_day'] + df_combined['cnt_hour']

# Memeriksa kolom yang tersedia setelah penyesuaian
print(df_combined.columns)

# Statistik deskriptif pada kolom 'cnt' yang menunjukkan jumlah penyewaan sepeda
desc_stats = df_combined['cnt'].describe()
print(desc_stats)

df_combined['season'] = df_combined['season_day'] + df_combined['season_hour']

# Memeriksa kolom yang tersedia setelah penyesuaian
print(df_combined.columns)

season_stats = df_combined.groupby('season')['cnt'].describe()

df_combined['weathersit'] = df_combined['weathersit_day'] + df_combined['weathersit_hour']

weathersit_stats = df_combined.groupby('weathersit')['cnt'].describe()

"""# Visualization & Explanatory Analysis"""

# mengelompokan data berdasarkan'season' dan menghitung rata-rata penyewaan sepeda per musim
season_avg = df_combined.groupby('season')['cnt'].mean()

# Visualisasi pengaruh musim terhadap jumlah penyewaan sepeda
plt.figure(figsize=(8, 6))
sns.barplot(x=season_avg.index, y=season_avg.values, palette="viridis")
plt.title("Pengaruh Musim Terhadap Jumlah Penyewaan Sepeda")
plt.xlabel("Musim (1: Musim Semi, 2: Musim Panas, 3: Musim Gugur, 4: Musim Dingin)")
plt.ylabel("Rata-rata Penyewaan Sepeda")
plt.xticks(rotation=45)
plt.show()

weather_avg = df_combined.groupby('weathersit')['cnt'].mean()

# Visualisasi pengaruh cuaca terhadap jumlah penyewaan sepeda
plt.figure(figsize=(8, 6))
sns.barplot(x=weather_avg.index, y=weather_avg.values, palette="coolwarm")
plt.title("Pengaruh Cuaca Terhadap Jumlah Penyewaan Sepeda")
plt.xlabel("Kategori Cuaca")
plt.ylabel("Rata-rata Penyewaan Sepeda")
plt.xticks(rotation=45)
plt.show()

# Memeriksa kolom yang tersedia setelah penyesuaian
print(df_combined.columns)

print(hour_df.columns)

# Memilih kolom yang ada di hour.csv
hour_df_filtered = hour_df[['instant', 'hr', 'season', 'weathersit', 'temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt', 'mnth', 'season']]

# Menggabungkan data day.csv dengan hour.csv berdasarkan 'instant'
df_combined = pd.merge(day_df[['instant', 'dteday', 'season', 'weathersit']], hour_df_filtered, on='instant', suffixes=('_day', '_hour'))

print(df_combined.columns)

# Korelasi antar kolom numerik yang ada dalam dataset gabungan
corr_matrix = df_combined[['cnt', 'temp', 'atemp', 'hum', 'windspeed']].corr()

# Visualisasi korelasi menggunakan heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Heatmap Korelasi Antara Fitur-fitur Utama dan Penyewaan Sepeda")
plt.show()

# Mengelompokkan data berdasarkan jam ('hr') untuk melihat pola penyewaan sepeda per jam
hour_avg = df_combined.groupby('hr')['cnt'].mean()

# Visualisasi penyewaan sepeda per jam
plt.figure(figsize=(10, 6))
sns.lineplot(x=hour_avg.index, y=hour_avg.values, marker='o', color='green')
plt.title("Penyewaan Sepeda Per Jam")
plt.xlabel("Jam")
plt.ylabel("Rata-rata Penyewaan Sepeda")
plt.xticks(range(0, 24, 1))
plt.grid(True)
plt.show()

# mengelompokan dan melihat pola penyewaan sepeda per bulan
month_avg = df_combined.groupby('mnth')['cnt'].mean()

# Visualisasi penyewaan sepeda per bulan
plt.figure(figsize=(10, 6))
sns.lineplot(x=month_avg.index, y=month_avg.values, marker='o', color='blue')
plt.title("Penyewaan Sepeda Per Bulan")
plt.xlabel("Bulan")
plt.ylabel("Rata-rata Penyewaan Sepeda")
plt.xticks(range(1, 13, 1))
plt.grid(True)
plt.show()

"""# Pengembangan Dashboard"""

import plotly.express as px

# Visualisasi interaktif untuk pengaruh musim terhadap penyewaan sepeda
fig1 = px.bar(season_avg, x=season_avg.index, y=season_avg.values,
              labels={'x': 'Musim', 'y': 'Rata-rata Penyewaan Sepeda'},
              title="Pengaruh Musim Terhadap Jumlah Penyewaan Sepeda")
fig1.update_layout(xaxis_title="Musim", yaxis_title="Rata-rata Penyewaan Sepeda")
fig1.show()

# Visualisasi interaktif untuk pengaruh cuaca terhadap penyewaan sepeda
fig2 = px.bar(weather_avg, x=weather_avg.index, y=weather_avg.values,
              labels={'x': 'Kategori Cuaca', 'y': 'Rata-rata Penyewaan Sepeda'},
              title="Pengaruh Cuaca Terhadap Jumlah Penyewaan Sepeda")
fig2.update_layout(xaxis_title="Kategori Cuaca", yaxis_title="Rata-rata Penyewaan Sepeda")
fig2.show()

# Menyimpan hasil analisis sebagai CSV
season_avg.to_csv("season_avg.csv")
weather_avg.to_csv("weather_avg.csv")

pip install streamlit

import streamlit as st

# Judul Dashboard
st.title("Dashboard Analisis Penyewaan Sepeda")

# Deskripsi
st.write("""
    Dashboard ini menampilkan analisis mengenai faktor-faktor yang mempengaruhi jumlah penyewaan sepeda,
    seperti pengaruh musim, cuaca, dan faktor lainnya yang relevan.
""")

# Sidebar untuk memilih analisis
st.sidebar.header("Pilih Analisis")
analysis_type = st.sidebar.selectbox(
    "Pilih Jenis Analisis",
    ("Pengaruh Musim Terhadap Penyewaan", "Korelasi Antara Fitur-Fitur")
)

print(df_combined.columns)

# Pastikan menggabungkan day dan hour dengan benar
df_combined = pd.merge(day_df[['instant', 'dteday', 'season']], hour_df[['instant', 'casual', 'registered']], on='instant', how='inner')

# Cek kolom setelah penggabungan
print(df_combined.columns)

# Memeriksa nilai yang hilang dalam kolom 'season'
print(df_combined['season'].isnull().sum())

if analysis_type == "Pengaruh Musim Terhadap Penyewaan":
    # Analisis Pengaruh Musim
    st.subheader("Pengaruh Musim Terhadap Jumlah Penyewaan Sepeda")

    # Menghitung rata-rata jumlah penyewaan per musim
    season_avg = df_combined.groupby('season')['casual'].mean() + df_combined.groupby('season')['registered'].mean()

    # Visualisasi Pengaruh Musim
    plt.figure(figsize=(8, 6))
    sns.barplot(x=season_avg.index, y=season_avg.values, palette="viridis")
    plt.title("Pengaruh Musim Terhadap Penyewaan Sepeda")
    plt.xlabel("Musim (1: Musim Semi, 2: Musim Panas, 3: Musim Gugur, 4: Musim Dingin)")
    plt.ylabel("Rata-rata Penyewaan Sepeda")
    plt.xticks(rotation=45)

    # Menampilkan grafik
    st.pyplot(plt)

elif analysis_type == "Korelasi Antara Fitur-Fitur":
    # Analisis Korelasi Antara Fitur
    st.subheader("Korelasi Antara Fitur-Fitur dan Penyewaan Sepeda")

    # Menghitung korelasi antar kolom numerik
    corr_matrix = df_combined[['cnt', 'temp', 'atemp', 'hum', 'windspeed']].corr()

    # Visualisasi Heatmap Korelasi
    plt.figure(figsize=(10, 6))
    sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
    plt.title("Heatmap Korelasi Antara Fitur-fitur dan Penyewaan Sepeda")

    # Menampilkan grafik
    st.pyplot(plt)

